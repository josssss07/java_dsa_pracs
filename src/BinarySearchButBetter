package Josh;

class Node{
    int data;
    Node left;
    Node right;

    public int getData() {
        return data;
    }

    public void setData(int data) {
        this.data = data;
    }

    public Node getLeft() {
        return left;
    }

    public void setLeft(Node left) {
        this.left = left;
    }

    public Node getRight() {
        return right;
    }

    public void setRight(Node right) {
        this.right = right;
    }

    Node(int data){
        this.data = data;
    }
}
public class BinarySearchTree {
    Node root;
    public void insert(Node node){
        root = insertHelper(root, node);
    }
    private Node insertHelper(Node root, Node node){
        int data = node.data;
        if(root == null){
            root = node;
            return root;
        } else if (data<root.data) {
            root.left = insertHelper(root.left, node);
        }else{
            root.right = insertHelper(root.right, node);
        }
        return root;
    }

//    int data = node.data;
//
//		if(root == null) {
//        root = node;
//        return root;
//    }
//		else if(data < root.data) {
//        root.left = insertHelper(root.left, node);
//    }
//		else {
//        root.right = insertHelper(root.right, node);
//    }
//
//		return root;

    public void display(){
        displayHelper(root);
    }
    private void displayHelper(Node root){
        if(root!= null){
            displayHelper(root.left);
            System.out.println(root.data);
            displayHelper(root.right);
        }
    }
    public boolean search(int data){
        return searchHelper(root, data);
    }
    private  boolean searchHelper(Node root, int data){
        if(root == null){
            return false;
        } else if (root.data == data) {
            return true;
        } else if (root.data>data) {
            return searchHelper(root.left,data);
        }else {
            return searchHelper(root.right, data);
        }

    }
    public void remove(int data){
        if(search(data)){
            removeHelper(root, data);
        }else {
            System.out.println("no data");
        }
    }
    private Node removeHelper(Node root, int data){
        if(root == null){
            return root;
        } else if (data<root.data) {
            root.left = removeHelper(root.left, data);
        }else if(data>root.data){
            root.right =removeHelper(root.right, data);
        }else {
            if(root.left == null && root.right == null){
                root = null;
            } else if (root.right != null) {
                root.data = successor(root);
                root.right = removeHelper(root.right, root.data);
            }
            else{
                root.data = successor(root);
                root.left = removeHelper(root.left , root.data);
            }
        }
        return root;
    }
    private int successor(Node root){
            root =root.right;
            while (root.left != null){
                root = root.left;
            }
        return root.data;
    }
    private int predecessor(Node root){
        root = root.left;
        while (root.right != null){
            root = root.right;
        }
        return root.data;
    }

}

class MainTwo{
    public static void main(String[] args) {
        BinarySearchTree tree = new BinarySearchTree();
        tree.insert(new Node(1));
        tree.insert(new Node(4));
        tree.insert(new Node(23));
        tree.insert(new Node(12));
        tree.insert(new Node(10));

        tree.display();
        System.out.println(tree.search(0));
        tree.remove(0);
    }

}
